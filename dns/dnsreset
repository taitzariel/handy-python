#!/usr/bin/env python3

import os
import subprocess
import argparse
from typing import Tuple, Set

def run(command: str) -> Tuple[str, str]:
    proc = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)
    (out, err) = proc.communicate()
    if proc.returncode:
        raise Exception(f"command {command}, return code: {proc.returncode}")
    return out, err

def dns_configured() -> bool:
    lines = subprocess.check_output("cat /etc/resolv.conf | grep nameserver", shell=True, text=True).splitlines()
    addresses = [line.split()[-1] for line in lines]
    return any(add for add in addresses if not add.startswith('10.'))

def pgrep(pattern: str) -> Set[int]:
    pids = run("pgrep dhclient")[0].splitlines()
    return {int(pid) for pid in pids}

def restart_dns() -> None:
    original_pids = pgrep("dhclient")
    print(f"original pids {original_pids}")
    run("sudo dhclient")
    current_pids = pgrep("dhclient")
    new_pids = {pid for pid in current_pids if pid not in original_pids}
    print(f"new pids {new_pids}")
    assert len(new_pids) == 1, "expected only one new dhclient process"
    run(f"sudo kill {next(iter(new_pids))}")

def main(force: bool) -> None:
    if force:
        restart_dns()
    elif dns_configured():
        print("dns already configured")
    else:
        print("restarting dns")
        restart_dns()
        if dns_configured():
            print("dns now configured")
        else:
            print("failed to configure dns")

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-f', '--force', action='store_true', help='force reset')
    args = parser.parse_args()
    main(args.force)

